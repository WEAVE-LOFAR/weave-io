
a. data.runs[Address(vph=green, date_obs=####)].spectra
b. data.obs[obid].runs[Address(vph=green, date_obs=####)].spectra

Chaining expressions:
	a. 
		* data.runs -> EclecticHomogeneousStore(Runs)
		* data.runs[Address(vph=green, date_obs=####)] -> EclecticHomogeneousStore(Runs, Address(vph=green, date_obs=####))
		* data.runs[Address(vph=green, date_obs=####)].spectrum -> Spectra
	b.
		* data.obs -> HomogeneousStore(OBs)
		* data.obs[obid] -> OB
		* data.obs[obid].runs -> HomogeneousStore(Runs, parents=[OB])
		* data.obs[obid].runs[Address(vph=green, date_obs=####)] -> HomogeneousStore(Runs, parents=[OB], Address(vph=green, date_obs=####))
		* data.obs[obid].runs[Address(vph=green, date_obs=####)].spectra -> Spectra
	At the end of chaining expressions, you have: 
		DataDirectory + [parent_ids(hierarchies)] + [address(factors)] + ProductType + [FileType] + Plural/Singular
specifying a `target` will filter to those which use this target
specifying a list of `target` will filter to those which use those targets




actions you can perform on the graph:
	* Read(hierarchy_type, id, file_type)
		instance_graph.add(hierarchy(id), file(file_type), *parent-factors, *parent-hierarchies)
	* 

data.runs[runid].l2superstacks
	Option 1:
		* Read single file for all relevant factors 
		* Filter l2superstack fnames by those factors
		* Filter again by reading the l2superstack for ones that contain runid
	Option 2:
		* Read all l2superstack files for runids

Why not just have dictionary mappings?
	data[Address(vph=[green, red], target=[target])].single.spectra
	dict[key=name:str][value=value:str] = set(filenames)
	d[vph][green] & d[vph][red] & d[target][target1] & d[filetype][single]
	
	needs another mapping:
		d[filename] = {all items}



	data.runs[runid].arm_config
		For dict/set:
			filename = d[runs][runid] 
			return ArmConfig(**d[files][filename].items())
		For graph:
			[a for a in graph.nodes['runid{runid}'].ancestors() if a['type'] == 'arm_config'][0]

	data[Address(vph=green, date_obs=####, )].arm_configs
		For dict/set:
			filenames = d[vph][green] & d[date_obs][####]
			ArmConfig(**d[filename][fname]) for 



ids/factors/hierarchy/filetype/product: 